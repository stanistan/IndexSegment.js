{"version":3,"sources":["IndexSegment.js"],"names":[],"mappings":";;;;;;;;;;;;;;8BAAgB,kBAAkB;;;;8BAClB,kBAAkB;;;;AAElC,SAAS,eAAe,CAAC,CAAC,EAAE,CAAC,EAAE;AAC7B,SAAO,CAAC,GAAG,gCAAQ,6BAAI,CAAC,GAAE,MAAM,CAAC,UAAA,CAAC;WAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;GAAA,CAAC,CAAC,GAAG,CAAC,CAAC;CACvD;;AAED,SAAS,SAAS,CAAC,CAAC,EAAE;AACpB,MAAI,IAAI,GAAG,EAAE,CAAC;AACd,GAAC,CAAC,OAAO,CAAC,UAAA,CAAC;WAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;GAAA,CAAC,CAAC;AAC7B,SAAO,IAAI,CAAC;CACb;;AAED,SAAS,MAAM,CAAC,GAAG,EAAE;AACnB,SAAO,SAAS,CAAC,gCAAQ,GAAG,CAAC,CAAC,CAAC;CAChC,CAAC;;IAEI,YAAY;AAEL,WAFP,YAAY,CAEJ,SAAS,EAAE;0BAFnB,YAAY;;AAGd,QAAI,CAAC,IAAI,GAAG,iCAAS,CAAC;AACtB,QAAI,CAAC,MAAM,GAAG,CAAC,CAAC;AAChB,QAAI,CAAC,IAAI,GAAG,CAAC,CAAC;AACd,QAAI,CAAC,SAAS,GAAG,SAAS,IAAI,YAAY,CAAC,gBAAgB,CAAC;GAC7D;;eAPG,YAAY;;WASR,kBAAC,IAAI,EAAE;AACb,aAAO,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;KACrC;;;WAEU,qBAAC,KAAK,EAAE;AACjB,UAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;AACzB,YAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,iCAAS,CAAC,CAAC;OACjC;AACD,aAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;KAC7B;;;WAEQ,mBAAC,MAAM,EAAE,EAAE,EAAE;;;AACpB,YAAM,CAAC,OAAO,CAAC,UAAA,KAAK,EAAI;AACtB,cAAK,WAAW,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;OACjC,CAAC,CAAC;AACH,UAAI,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;AAC7B,UAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;AAC3B,aAAO,IAAI,CAAC;KACb;;;WAEE,aAAC,IAAI,EAAE,EAAE,EAAE;AACZ,aAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;KAChD;;;WAEK,gBAAC,IAAI,EAAE;;;AACX,aAAO,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CACjC,GAAG,CAAC,UAAA,KAAK;eAAI,OAAK,WAAW,CAAC,KAAK,CAAC;OAAA,CAAC,CACrC,MAAM,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC,CAAC;KACnC;;;WAEsB,0BAAC,IAAI,EAAE;AAC5B,aAAO,IAAI,CACR,QAAQ,EAAE,CACV,WAAW,EAAE,CACb,KAAK,CAAC,cAAc,CAAC,CACrB,GAAG,CAAC,UAAA,CAAC;eAAI,CAAC,CAAC,IAAI,EAAE;OAAA,CAAC,CAClB,MAAM,CAAC,UAAA,CAAC;eAAI,CAAC,IAAI,EAAE;OAAA,CAAC,CAAC;KAEzB;;;SA/CG,YAAY;;;AAiDjB,CAAC;;QAEO,YAAY,GAAZ,YAAY;QAAE,GAAG;QAAE,GAAG","file":"IndexSegment.js","sourcesContent":["import Set from 'es6-set/polyfill';\nimport Map from 'es6-map/polyfill';\n\nfunction setIntersection(a, b) {\n  return a ? new Set([...a].filter(x => !b.has(x))) : b;\n}\n\nfunction setValues(s) {\n  var vals = [];\n  s.forEach(a => vals.push(a));\n  return vals;\n}\n\nfunction unique(els) {\n  return setValues(new Set(els));\n};\n\nclass IndexSegment {\n\n  constructor(tokenizer) {\n    this.data = new Map();\n    this.length = 0;\n    this.size = 0;\n    this.tokenizer = tokenizer || IndexSegment.STRING_TOKENIZER;\n  }\n\n  tokenize(data) {\n    return unique(this.tokenizer(data));\n  }\n\n  setForToken(token) {\n    if (!this.data.has(token)) {\n      this.data.set(token, new Set());\n    }\n    return this.data.get(token);\n  }\n\n  putTokens(tokens, id) {\n    tokens.forEach(token => {\n      this.setForToken(token).add(id);\n    });\n    this.length = this.data.size;\n    this.size = this.data.size;\n    return this;\n  }\n\n  put(data, id) {\n    return this.putTokens(this.tokenize(data), id);\n  }\n\n  search(data) {\n    return setValues(this.tokenize(data)\n      .map(token => this.setForToken(token))\n      .reduce(setIntersection, null));\n  }\n\n  static STRING_TOKENIZER(data) {\n    return data\n      .toString()\n      .toLowerCase()\n      .split(/[^a-zA-Z0-9]/)\n      .map(s => s.trim())\n      .filter(s => s != \"\");\n\n  }\n\n};\n\nexport { IndexSegment, Set, Map };\n"],"sourceRoot":"/Users/stanistan/dev/mini-search-index.js/es6"}