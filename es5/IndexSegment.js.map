{"version":3,"sources":["IndexSegment.js"],"names":[],"mappings":";;;;;;;;AACA,IAAI,eAAe,GAAG,SAAlB,eAAe,CAAY,CAAC,EAAE,CAAC,EAAE;AACnC,SAAO,CAAC,GAAI,IAAI,GAAG,CAAC,6BAAI,CAAC,GAAE,MAAM,CAAC,UAAA,CAAC;WAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;GAAA,CAAC,CAAC,GAAG,CAAC,CAAC;CACxD,CAAC;;IAEI,YAAY;AAEL,WAFP,YAAY,CAEJ,SAAS,EAAE;0BAFnB,YAAY;;AAGd,QAAI,CAAC,IAAI,GAAG,EAAE,CAAC;AACf,QAAI,CAAC,SAAS,GAAG,SAAS,IAAI,YAAY,CAAC,gBAAgB,CAAC;GAC7D;;eALG,YAAY;;WAOR,kBAAC,IAAI,EAAE;AACb,aAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;KAC7B;;;WAEU,qBAAC,KAAK,EAAE;AACjB,UAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC3B,UAAI,EAAE,KAAK,IAAI,IAAI,CAAC,IAAI,CAAA,AAAC,EAAE;AACzB,YAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC;OAC9B;AACD,aAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACzB;;;WAEQ,mBAAC,MAAM,EAAE,EAAE,EAAE;;;AACpB,YAAM,CAAC,OAAO,CAAC,UAAA,KAAK,EAAI;AACtB,cAAK,WAAW,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;OACjC,CAAC,CAAC;AACH,aAAO,IAAI,CAAC;KACb;;;WAEE,aAAC,IAAI,EAAE,EAAE,EAAE;AACZ,aAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;KAChD;;;WAEK,gBAAC,IAAI,EAAE;;;AACX,aAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,KAAK,EAAK;AAChD,eAAO,eAAe,CAAC,GAAG,EAAE,OAAK,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,GAAG,EAAE,CAAC,CAAC;OAC5D,EAAE,IAAI,CAAC,CAAC;KACV;;;WAEsB,0BAAC,IAAI,EAAE;AAC5B,aAAO,IAAI,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,UAAA,CAAC;eAAI,CAAC,CAAC,IAAI,EAAE;OAAA,CAAC,CAAC;KACtD;;;SAtCG,YAAY;;;AAwCjB,CAAC;;AAEF,IAAI,KAAK,GAAG,IAAI,YAAY,EAAE,CAAC;AAC/B,KAAK,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;AACxB,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;;AAEvB,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,UAAA,KAAK;SAAI,OAAO,CAAC,GAAG,CAAC,OAAO,GAAG,KAAK,CAAC;CAAA,CAAC,CAAC;AACnE,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC","file":"IndexSegment.js","sourcesContent":["\nlet setIntersection = function(a, b) {\n  return a ?  new Set([...a].filter(x => !b.has(x))) : b;\n};\n\nclass IndexSegment {\n\n  constructor(tokenizer) {\n    this.data = {};\n    this.tokenizer = tokenizer || IndexSegment.STRING_TOKENIZER;\n  }\n\n  tokenize(data) {\n    return this.tokenizer(data);\n  }\n\n  setForToken(token) {\n    var set = this.data[token];\n    if (!(token in this.data)) {\n      this.data[token] = new Set();\n    }\n    return this.data[token];\n  }\n\n  putTokens(tokens, id) {\n    tokens.forEach(token => {\n      this.setForToken(token).add(id);\n    });\n    return this;\n  }\n\n  put(data, id) {\n    return this.putTokens(this.tokenize(data), id);\n  }\n\n  search(data) {\n    return this.tokenize(data).reduce((acc, token) => {\n      return setIntersection(acc, this.data[token] || new Set());\n    }, null);\n  }\n\n  static STRING_TOKENIZER(data) {\n    return data.toString().split(\" \").map(s => s.trim());\n  }\n\n};\n\nvar index = new IndexSegment();\nindex.put(\"hey you\", 1);\nindex.put(\"hey me\", 2);\n\nindex.search(\"hey\").forEach(found => console.log(\"found\" + found));\nconsole.log('done');\n"],"sourceRoot":"/Users/stanistan/dev/mini-search-index.js/es6"}